#!/bin/bash
# Copyright 2014 Joukou Ltd
# Copyright 2014, OpDemand LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# fail hard and fast even on pipelines
set -eo pipefail

# set debug based on envvar
[[ $DEBUG ]] && set -x

# retrieve IPv4 address asigned to the given interface
function get_iface_v4_addr {
  local iface="${1}"
  ip -o -4 addr list "${iface}" 2> /dev/null | \
      awk '{print $4}' | \
      cut -d/ -f1
}

# retrieve the ip address of the given container
function get_container_v4_addr {
  local container_name="${1}"
  docker inspect $container_name | jq .[0].NetworkSettings.IPAddress
}

# configure etcd
export ETCD_PORT=${ETCD_PORT:-4001}
export ETCD_ADDR=${ETCD_ADDR:-${DOCKER_BRIDGE_IP}:${ETCD_PORT}}
export ETCD_TTL=${ETCD_TTL:-10}

# configure SkyDNS
export SKYZONE=$(echo ${SKYDNS_CONTAINER}|awk -F"_" '{print $2}')
export SKYDNS_DOMAIN_PATH=${SKYDNS_DOMAIN_PATH:-mazaclub}
export SKYDNS_ZONE=${SKYDNS_ZONE:-${SKYZONE}}
export SKYDNS_ENVIRONMENT=${SKYDNS_ENVIRONMENT:-production}

if [[ -n $SKYDNS_IFACE ]]
then
  export SKYDNS_IP="$(get_iface_v4_addr $SKYDNS_IFACE)"
  export byip=true
  if [[ ! -n $SKYDNS_NAME ]]
  then
    echo "$(date '+[%Y-%m-%d %H:%M:%S %Z]') [ERROR] \$SKYDNS_NAME must be set when using \$SKYDNS_IFACE!"
    exit 1
  fi
elif [[ -n $SKYDNS_CONTAINER ]]
then
  export SKYDNS_IP=$(get_container_v4_addr $SKYDNS_CONTAINER)
  export SKYDNS_NAME=$(echo $SKYDNS_CONTAINER|awk -F"_" '{print $1}')
  if [ "${SKYDNS_NAME}" = "skydns" ] ; then
     export SKYDNS_NAME=ns
     export SKYDNS_ZONE=dns
  fi
else
  echo "$(date '+[%Y-%m-%d %H:%M:%S %Z]') [ERROR] \$SKYDNS_IFACE OR \$SKYDNS_CONTAINER must be set!"
  exit 1
fi
# We use global skydns via fleet
# maybe joukou's is better, but 
#if [[ ! -n $SKYDNS_INSTANCE ]]; then
#  echo "$(date '+[%Y-%m-%d %H:%M:%S %Z]') [ERROR] \$SKYDNS_INSTANCE number must be set; i.e. pass-through %i from systemd!"
#  exit 1
#fi

if [[ ! -n $SKYDNS_PORT ]]; then
  echo "$(date '+[%Y-%m-%d %H:%M:%S %Z]') [ERROR] \$SKYDNS_PORT must be set!"
  exit 1
fi

export SKYDNS_PROTO=${SKYDNS_PROTO:-tcp}

#export SKYDNS_PATH="/skydns/${SKYDNS_DOMAIN_PATH}/${SKYDNS_ZONE}/${SKYDNS_ENVIRONMENT}/${SKYDNS_NAME}/${SKYDNS_INSTANCE}"
if [ "${SKYDNS_ZONE}X" = "X"  ] ; then
     echo "$(date '+[%Y-%m-%d %H:%M:%S %Z]') [INFO] \$SKYDNS_ZONE not set, using ${SKYDNS_NAME}.${SKYDNS_DOMAIN_PATH}!"
     export SKYDNS_PATH="/skydns/${SKYDNS_DOMAIN_PATH}/${SKYDNS_NAME}"
else echo "$(date '+[%Y-%m-%d %H:%M:%S %Z]') [INFO] \$SKYDNS_ZONE set to ${SKYDNS_ZONE}"
     export SKYDNS_PATH="/skydns/${SKYDNS_DOMAIN_PATH}/${SKYDNS_ZONE}/${SKYDNS_NAME}"
fi
# smart shutdown on SIGINT and SIGTERM
function on_exit() {
  echo "$(date '+[%Y-%m-%d %H:%M:%S %Z]') [INFO] Removing ${SKYDNS_PATH}..."
  etcdctl --no-sync -C $ETCD_ADDR rm $SKYDNS_PATH --with-value \
    "{\"host\": \"${SKYDNS_IP}\", \"port\": \"${SKYDNS_PORT}\"}" >/dev/null 2>&1
  exit 0
}
trap on_exit INT TERM

# wait for etcd to be available
until etcdctl --no-sync -C $ETCD_ADDR ls >/dev/null 2>&1; do
  echo "$(date '+[%Y-%m-%d %H:%M:%S %Z]') [INFO] Waiting for etcd at $ETCD_ADDR..."
  sleep $(($ETCD_TTL/2))  # sleep for half the etcd TTL
done

# wait until etcd has discarded potentially stale values
echo "$(date '+[%Y-%m-%d %H:%M:%S %Z]') [INFO] Sleeping for $((ETCD_TTL+1))s for etcd to discard potentially stale values..."
sleep $(($ETCD_TTL+1))

echo "$(date '+[%Y-%m-%d %H:%M:%S %Z]') [INFO] Announcing ${SKYDNS_PATH}..."
echo "$(date '+[%Y-%m-%d %H:%M:%S %Z]') [INFO] Host: ${SKYDNS_IP}"
echo "$(date '+[%Y-%m-%d %H:%M:%S %Z]') [INFO] Port: ${SKYDNS_PORT}"
if [ "$byip" = "true" ] ; then
   echo "Using ${SKYDNS_IP} by IP"
   while etcdctl --no-sync -C $ETCD_ADDR set --ttl $ETCD_TTL $SKYDNS_PATH "{\"host\": \"${SKYDNS_IP}\",\"port\": ${SKYDNS_PORT}}" 2>&1; do
      #since one of our primary uses for this is HA services on host.domain names, randomize this a little
      xtra=$(echo $[ RANDOM % 10 ])
      sleep $(($ETCD_TTL-$xtra)) # sleep etcd ttl - a little
   done
else echo "Using ${SKYDNS_IP} via container_name"
   while etcdctl --no-sync -C $ETCD_ADDR set --ttl $ETCD_TTL $SKYDNS_PATH "{\"host\": ${SKYDNS_IP},\"port\": ${SKYDNS_PORT}}" 2>&1; do
     sleep $(($ETCD_TTL/2)) # sleep for half the etcd TTL
   done
fi
# if the loop quits, something went wrong
exit 1
